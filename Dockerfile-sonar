#FROM base image
FROM dxcuong206/dotnet-java:01 as build
#ENV http_proxy http://10.26.2.55:8080
#ENV https_proxy http://10.26.2.55:8080
#ENV no_proxy localhost,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,169.254.0.0/16,127.0.0.0/8
ARG SONAR_PROJECT_KEY=test-dotnet2
ARG SONAR_PROJECT_NAME=test-dotnet2
ARG SONAR_HOST_URL=http://10.26.2.219:9000
ARG SONAR_TOKEN=sqa_e4665936c3234f70d0fc234b9f8d72659bc6c7ef
ARG SONAR_VERSION=V2.0.0

WORKDIR /app

# Install Java 16
#RUN apt-get update && apt-get install -y openjdk-18-jdk

# Install Sonar Scanner, Coverlet and Java (required for Sonar Scanner)
ENV PATH="$PATH:/root/.dotnet/tools"

# Set SonarScanner options for proxy
ENV SONAR_SCANNER_OPTS="-Dhttp.proxyHost=10.26.2.55 -Dhttp.proxyPort=8080"

# Start Sonar Scanner

# Restore NuGet packages
COPY . .
RUN dotnet restore
RUN dotnet tool install --global dotnet-sonarscanner
RUN dotnet tool install --global coverlet.console
RUN dotnet sonarscanner begin \
  /k:"$SONAR_PROJECT_KEY" \
  /o:"$SONAR_PROJECT_NAME" \
  /d:sonar.host.url="$SONAR_HOST_URL" \
  /d:sonar.login="$SONAR_TOKEN" \
  /d:sonar.cs.opencover.reportsPaths=/coverage.opencover.xml \
  /v:"$SONAR_VERSION"


# Copy the rest of the files over
#COPY . .
# Build and test the application
RUN dotnet publish --output /out/
RUN dotnet test \
  /p:CollectCoverage=true \
  /p:CoverletOutputFormat=opencover \
  /p:CoverletOutput="/coverage"

# End Sonar Scanner
RUN dotnet sonarscanner end /d:sonar.token="$SONAR_TOKEN"

